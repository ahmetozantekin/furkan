// Generated by CoffeeScript 1.7.1
(function() {
  (function(root, factory) {
    if (typeof define === "function" && define.amd) {
      define(["exports"], function(exports) {
        root.Furkan = factory(root, exports);
      });
    } else if (typeof exports !== "undefined") {
      factory(root, exports);
    } else {
      root.Furkan = factory(root, {});
    }
  })(this, function(root, Furkan) {
    var BAD_ASS, Dolly;
    BAD_ASS = "hi";
    Furkan.VERSION = "0.0.6";
    Furkan.NAME = "Furkan";
    Furkan.ERAY = "fuckin'";
    Furkan.YES = 1;
    Furkan.NO = 0;
    Furkan.ARRAY = [];
    Furkan.SPACE = " ";
    Furkan.LIP = ":*";
    Furkan.HAPPY = 0;
    Furkan.RELATIONSHIP = "Single";
    Furkan.kiss = function() {
      this.HAPPY++;
      return this.LIP;
    };
    Furkan.whoami = function() {
      return this.NAME;
    };
    Furkan.status = function() {
      return this.RELATIONSHIP;
    };
    Furkan.mood = function() {
      var tempHappy;
      tempHappy = this.HAPPY;
      if (tempHappy === 0) {
        return this.ERAY;
      } else if (tempHappy > 0 && tempHappy < 4) {
        return this.LIP;
      } else {
        return BAD_ASS;
      }
    };
    Furkan.say = function(text) {
      if (text.toLowerCase() === BAD_ASS) {
        if (this.HAPPY - 1 !== -1) {
          this.HAPPY--;
        }
        throw new Error(this.NAME + this.SPACE + "dont" + this.SPACE + "apply" + this.SPACE + this.ERAY + this.SPACE + "this" + this.SPACE + "text!");
      }
      return text + this.SPACE + this.NAME;
    };
    Furkan.amicute = function() {
      return this.YES;
    };
    Dolly = function() {
      var clone, copy, copyIsArray, deep, i, length, name, options, src, target;
      options = void 0;
      name = void 0;
      src = void 0;
      copy = void 0;
      copyIsArray = void 0;
      clone = void 0;
      target = arguments[0] || {};
      i = 1;
      length = arguments.length;
      deep = false;
      if (typeof target === "boolean") {
        deep = target;
        target = arguments[i] || {};
        i++;
      }
      if (typeof target !== "object" && (Object.prototype.toString.call(target) !== "[object Function]")) {
        target = {};
      }
      if (i === length) {
        target = this;
        i--;
      }
      while (i < length) {
        if ((options = arguments[i]) != null) {
          for (name in options) {
            src = target[name];
            copy = options[name];
            if (target === copy) {
              continue;
            }
            if (deep && copy && ((copy.toString() === "[object Object]") || (copyIsArray = Object.prototype.toString.call(copy) === "[object Array]"))) {
              if (copyIsArray) {
                copyIsArray = false;
                clone = (src && (Object.prototype.toString.call(src) === "[object Array]") ? src : []);
              } else {
                clone = (src && (src.toString() === "[object Object]") ? src : {});
              }
              target[name] = Dolly(deep, clone, copy);
            } else {
              if (copy !== undefined) {
                target[name] = copy;
              }
            }
          }
        }
        i++;
      }
      return target;
    };
    Furkan.extend = function(args) {
      this.HAPPY--;
      return Dolly(true, Dolly(true, {}, Furkan), args);
    };
    return Furkan;
  });

}).call(this);

//# sourceMappingURL=furkan.map
